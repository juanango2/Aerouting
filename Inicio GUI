import tkinter as tk
from tkinter import messagebox
from tkinter import Listbox
import os
import folium
from xml.etree import ElementTree as ET

def list_files():
    directory = r"C:\Users\juand\OneDrive\Escritorio\VS code\Rutas"
    files = os.listdir(directory)
    for file in files:
        if file.endswith('.kml'):
            listbox.insert(tk.END, file)

def execute_file():
    selected_file = listbox.get(tk.ACTIVE)
    if selected_file:
        filepath = os.path.join(r"C:\Users\juand\OneDrive\Escritorio\VS code\Rutas", selected_file)
        display_kml_coordinates(filepath)
    else:
        messagebox.showwarning("No Selection", "Please select a file to execute.")

def display_kml_coordinates(filepath):
    # Parse the KML file
    tree = ET.parse(filepath)
    root = tree.getroot()
    
    # Namespace for KML files
    namespaces = {'default': 'http://www.opengis.net/kml/2.2'}
    
    # Find all coordinates
    coordinates = root.findall(".//default:coordinates", namespaces)

    # Extract latitude and longitude, ignore altitude
    lat_lon_points = []
    for coord in coordinates:
        coord_text = coord.text.strip()
        coord_sets = coord_text.split()  # Split by whitespace to handle multiple coordinates in one string
        for coord_set in coord_sets:
            try:
                lon, lat, _ = map(float, coord_set.split(','))
                lat_lon_points.append((lat, lon))
            except ValueError as e:
                print(f"Error processing coordinates: {coord_set}")
                print(f"Error details: {e}")

    # Create a map centered on the first coordinate
    if lat_lon_points:
        folium_map = folium.Map(location=lat_lon_points[0], zoom_start=13)

        # Add circle markers to the map with tooltips
        for point in lat_lon_points:
            tooltip = f"Lat: {point[0]}, Lon: {point[1]}"
            folium.CircleMarker(
                location=point,
                radius=5,  # You can adjust the radius as needed
                color='black',
                fill=True,
                fill_color='black',
                tooltip=tooltip  # Add tooltip with coordinates
            ).add_to(folium_map)

        # Save the map to an HTML file and open it in the default web browser
        map_path = os.path.join(os.path.dirname(filepath), 'map.html')
        folium_map.save(map_path)
        os.startfile(map_path)

# Create the main application window
root = tk.Tk()
root.title("Four Squares GUI")

# Define the size of each square
square_size = 300

# Create and place the four squares
cua1 = tk.Frame(root, width=square_size, height=square_size, bg="black")
cua1.grid(row=0, column=0, padx=10, pady=10)

cua2 = tk.Frame(root, width=square_size, height=square_size, bg="black")
cua2.grid(row=2, column=0, padx=10, pady=10)

cua3 = tk.Frame(root, width=square_size, height=square_size, bg="black")
cua3.grid(row=0, column=1, padx=10, pady=10)

cua4 = tk.Frame(root, width=square_size, height=square_size, bg="black")
cua4.grid(row=2, column=1, padx=10, pady=10)

# Make sure the squares retain their size
cua1.grid_propagate(False)
cua2.grid_propagate(False)
cua3.grid_propagate(False)
cua4.grid_propagate(False)

# Create and place buttons under the corresponding squares
bot1 = tk.Button(root, text="Select Route", command=execute_file)
bot1.grid(row=1, column=0, padx=10, pady=10)

bot2 = tk.Button(root, text="Select Weather Image")
bot2.grid(row=3, column=0, padx=10, pady=10)

bot3 = tk.Button(root, text="Show Coordinates")
bot3.grid(row=1, column=1, padx=10, pady=10)

bot4 = tk.Button(root, text="Show Clouds")
bot4.grid(row=3, column=1, padx=10, pady=10)

# Listbox to display files in cua1
listbox = Listbox(cua1)
listbox.pack(fill=tk.BOTH, expand=True)

# List files in cua1
list_files()

# Run the application
root.mainloop()
